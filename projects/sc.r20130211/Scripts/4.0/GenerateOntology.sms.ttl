# baseURI: http://www.cmusv.edu/SmartCommunity/Scripts/4.0/GenerateOntology
# imports: http://purl.org/dc/elements/1.1/
# imports: http://topbraid.org/sparqlmotionfunctions
# imports: http://topbraid.org/sparqlmotionlib-tbc

@prefix GenerateOntology:  <http://www.cmusv.edu/SmartCommunity/Scripts/4.0/GenerateOntology#> .
@prefix afn:     <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg:     <http://spinrdf.org/arg#> .
@prefix email:   <http://topbraid.org/email#> .
@prefix fn:      <http://www.w3.org/2005/xpath-functions#> .
@prefix json:    <http://topbraid.org/json#> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sm:      <http://topbraid.org/sparqlmotion#> .
@prefix smf:     <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml:     <http://topbraid.org/sparqlmotionlib#> .
@prefix sp:      <http://spinrdf.org/sp#> .
@prefix spif:    <http://spinrdf.org/spif#> .
@prefix spin:    <http://spinrdf.org/spin#> .
@prefix spl:     <http://spinrdf.org/spl#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

sp:jsonRootClass
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

sp:jsonUrl
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

sp:ontologyBaseUri
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

sp:ontologyFileName
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

sp:outputBaseUri
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

sp:outputFileName
      rdf:type rdf:Property ;
      rdfs:subPropertyOf sp:arg .

<http://www.cmusv.edu/SmartCommunity/Scripts/4.0/GenerateOntology>
      rdf:type owl:Ontology ;
      owl:imports <http://topbraid.org/sparqlmotionlib-tbc> , <http://topbraid.org/sparqlmotionfunctions> , <http://purl.org/dc/elements/1.1/> ;
      owl:versionInfo "Created with TopBraid Composer"^^xsd:string .

GenerateOntology:AddClassAndProperty
      rdf:type sml:PerformUpdate ;
      sm:next GenerateOntology:BindPropertyInfo ;
      sml:updateQuery
              [ rdf:type sp:Modify ;
                sp:insertPattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object rdfs:Class ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "type"^^xsd:string
                                                ]
                                      ] [ sp:object rdf:Property ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "property"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:ontologyGraphUri>
                          ]) ;
                sp:where ()
              ] .

GenerateOntology:AddCollectionRestrictions
      rdf:type sml:PerformUpdate ;
      sml:updateQuery
              [ rdf:type sp:Modify ;
                sp:insertPattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object _:b1 ;
                                        sp:predicate rdfs:subClassOf ;
                                        sp:subject
                                                [ sp:varName "type"^^xsd:string
                                                ]
                                      ] [ sp:object owl:Restriction ;
                                        sp:predicate rdf:type ;
                                        sp:subject _:b1
                                      ] [ sp:object
                                                [ sp:varName "property"^^xsd:string
                                                ] ;
                                        sp:predicate owl:onProperty ;
                                        sp:subject _:b1
                                      ] [ sp:object
                                                [ sp:varName "collectionPropertyType"^^xsd:string
                                                ] ;
                                        sp:predicate owl:allValuesFrom ;
                                        sp:subject _:b1
                                      ]) ;
                            sp:graphNameNode <urn:x-var:ontologyGraphUri>
                          ]) ;
                sp:where ()
              ] .

GenerateOntology:AddPropertyRestrictions
      rdf:type sml:PerformUpdate ;
      sml:updateQuery
              [ rdf:type sp:Modify ;
                sp:insertPattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object _:b2 ;
                                        sp:predicate rdfs:subClassOf ;
                                        sp:subject
                                                [ sp:varName "type"^^xsd:string
                                                ]
                                      ] [ sp:object owl:Restriction ;
                                        sp:predicate rdf:type ;
                                        sp:subject _:b2
                                      ] [ sp:object
                                                [ sp:varName "property"^^xsd:string
                                                ] ;
                                        sp:predicate owl:onProperty ;
                                        sp:subject _:b2
                                      ] [ sp:object "1"^^xsd:nonNegativeInteger ;
                                        sp:predicate owl:maxCardinality ;
                                        sp:subject _:b2
                                      ] [ sp:object _:b3 ;
                                        sp:predicate rdfs:subClassOf ;
                                        sp:subject
                                                [ sp:varName "type"^^xsd:string
                                                ]
                                      ] [ sp:object owl:Restriction ;
                                        sp:predicate rdf:type ;
                                        sp:subject _:b3
                                      ] [ sp:object
                                                [ sp:varName "property"^^xsd:string
                                                ] ;
                                        sp:predicate owl:onProperty ;
                                        sp:subject _:b3
                                      ] [ sp:object
                                                [ sp:varName "propertyType"^^xsd:string
                                                ] ;
                                        sp:predicate owl:allValuesFrom ;
                                        sp:subject _:b3
                                      ]) ;
                            sp:graphNameNode <urn:x-var:ontologyGraphUri>
                          ]) ;
                sp:where ()
              ] .

GenerateOntology:BindCollectionInfo
      rdf:type sml:BindBySelect ;
      sm:next GenerateOntology:IfPropertyReferencesACollection ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:limit "1"^^xsd:long ;
                sp:resultVariables ([ sp:varName "collectionItem"^^xsd:string
                          ] [ sp:varName "collectionPropertyType"^^xsd:string
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ rdf:type sp:TriplePath ;
                                        sp:object
                                                [ sp:varName "collectionItem"^^xsd:string
                                                ] ;
                                        sp:path [ rdf:type sp:SeqPath ;
                                                  sp:path1
                                                          [ rdf:type sp:ModPath ;
                                                            sp:modMax -2 ;
                                                            sp:modMin 0 ;
                                                            sp:subPath rdf:rest
                                                          ] ;
                                                  sp:path2 rdf:first
                                                ] ;
                                        sp:subject
                                                [ sp:varName "propertyReference"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Optional ;
                                        sp:elements ([ sp:object
                                                            [ sp:varName "collectionObjectType"^^xsd:string
                                                            ] ;
                                                    sp:predicate rdf:type ;
                                                    sp:subject
                                                            [ sp:varName "collectionItem"^^xsd:string
                                                            ]
                                                  ])
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type sp:datatype ;
                                                  sp:arg1 [ sp:varName "collectionItem"^^xsd:string
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "collectionLiteralType"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type smf:if ;
                                                  sp:arg1 [ rdf:type smf:isBound ;
                                                            sp:arg1 [ sp:varName "collectionObjectType"^^xsd:string
                                                                    ]
                                                          ] ;
                                                  sp:arg2 [ sp:varName "collectionObjectType"^^xsd:string
                                                          ] ;
                                                  sp:arg3 [ sp:varName "collectionLiteralType"^^xsd:string
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "collectionPropertyType"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <http://www.cmusv.edu/SmartCommunity/Scripts/Temp/RdfData>
                          ])
              ] .

GenerateOntology:BindFilePaths
      rdf:type sml:BindBySelect ;
      sm:next GenerateOntology:Merge_1 ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "outputFilePath"^^xsd:string
                          ] [ sp:varName "ontologyFilePath"^^xsd:string
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression "/SmartCommunity/Scripts/Output/" ;
                            sp:variable
                                    [ sp:varName "outputFolder"^^xsd:string
                                    ]
                          ] [ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type fn:concat ;
                                      sp:arg1 [ sp:varName "outputFolder"^^xsd:string
                                              ] ;
                                      sp:arg2 [ sp:varName "outputFileName"^^xsd:string
                                              ]
                                    ] ;
                            sp:variable
                                    [ sp:varName "outputFilePath"^^xsd:string
                                    ]
                          ] [ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type fn:concat ;
                                      sp:arg1 [ sp:varName "outputFolder"^^xsd:string
                                              ] ;
                                      sp:arg2 [ sp:varName "ontologyFileName"^^xsd:string
                                              ]
                                    ] ;
                            sp:variable
                                    [ sp:varName "ontologyFilePath"^^xsd:string
                                    ]
                          ])
              ] .

GenerateOntology:BindGraphUri
      rdf:type sml:BindBySelect ;
      sm:next GenerateOntology:Merge_1 ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "outputGraphUri"^^xsd:string
                          ] [ sp:varName "ontologyGraphUri"^^xsd:string
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type spif:buildURI ;
                                      sp:arg1 [ sp:varName "outputBaseUri"^^xsd:string
                                              ]
                                    ] ;
                            sp:variable
                                    [ sp:varName "outputGraphUri"^^xsd:string
                                    ]
                          ] [ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type spif:buildURI ;
                                      sp:arg1 [ sp:varName "ontologyBaseUri"^^xsd:string
                                              ]
                                    ] ;
                            sp:variable
                                    [ sp:varName "ontologyGraphUri"^^xsd:string
                                    ]
                          ])
              ] .

GenerateOntology:BindPropertyInfo
      rdf:type sml:BindBySelect ;
      sm:next GenerateOntology:IfPropertyReferencesAType ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:limit "1"^^xsd:long ;
                sp:resultVariables ([ sp:varName "propertyReference"^^xsd:string
                          ] [ sp:varName "propertyType"^^xsd:string
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "type"^^xsd:string
                                                ] ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ] [ sp:object
                                                [ sp:varName "propertyReference"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "property"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Optional ;
                                        sp:elements ([ sp:object
                                                            [ sp:varName "objectType"^^xsd:string
                                                            ] ;
                                                    sp:predicate rdf:type ;
                                                    sp:subject
                                                            [ sp:varName "propertyReference"^^xsd:string
                                                            ]
                                                  ])
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type sp:datatype ;
                                                  sp:arg1 [ sp:varName "propertyReference"^^xsd:string
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "literalType"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type smf:if ;
                                                  sp:arg1 [ rdf:type smf:isBound ;
                                                            sp:arg1 [ sp:varName "objectType"^^xsd:string
                                                                    ]
                                                          ] ;
                                                  sp:arg2 [ sp:varName "objectType"^^xsd:string
                                                          ] ;
                                                  sp:arg3 [ sp:varName "literalType"^^xsd:string
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "propertyType"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <http://www.cmusv.edu/SmartCommunity/Scripts/Temp/RdfData>
                          ])
              ] .

GenerateOntology:ClearOntologyGraph
      rdf:type sml:PerformUpdate ;
      sm:next GenerateOntology:ForEachDistinctClass ;
      sml:updateQuery
              [ rdf:type sp:Modify ;
                sp:deletePattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "o"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "p"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:ontologyGraphUri>
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "o"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "p"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:ontologyGraphUri>
                          ])
              ] .

GenerateOntology:ClearTempGraph
      rdf:type sml:PerformUpdate ;
      sm:next GenerateOntology:ImportDeviceJsonFromUrl ;
      sml:updateQuery
              [ rdf:type sp:Modify ;
                sp:deletePattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "o"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "p"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <http://www.cmusv.edu/SmartCommunity/Scripts/Temp/RdfData>
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "o"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "p"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <http://www.cmusv.edu/SmartCommunity/Scripts/Temp/RdfData>
                          ])
              ] .

GenerateOntology:ConvertJsonToRdf
      rdf:type sml:ConvertJSONToRDF ;
      sm:next GenerateOntology:ExportRdfToOutputGraph ;
      sm:outputVariable "root"^^xsd:string .

GenerateOntology:CreateOntologyFileAndGraph
      rdf:type sml:ExportToRDFFile ;
      sm:next GenerateOntology:ClearOntologyGraph ;
      sml:baseURI "?ontologyBaseUri"^^xsd:string ;
      sml:baseURI
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "ontologyBaseUri"^^xsd:string
                          ]) ;
                sp:where ()
              ] ;
      sml:targetFilePath "?ontologyFilePath"^^xsd:string ;
      sml:targetFilePath
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "ontologyFilePath"^^xsd:string
                          ]) ;
                sp:where ()
              ] .

GenerateOntology:CreateTempFileAndGraph
      rdf:type sml:ExportToRDFFile ;
      sm:next GenerateOntology:ClearTempGraph ;
      sml:baseURI "http://www.cmusv.edu/SmartCommunity/Scripts/Temp/RdfData"^^xsd:string ;
      sml:targetFilePath "/SmartCommunity/Scripts/Temp/RdfData.ttl"^^xsd:string .

GenerateOntology:DeclareJsonPrefix
      rdf:type sml:ModifyPrefixes ;
      sm:next GenerateOntology:Merge_1 ;
      sml:addedPrefix "json http://topbraid.org/json#"^^xsd:string .

GenerateOntology:ExportRdfToOutputGraph
      rdf:type sml:ExportToRDFFile ;
      sm:next GenerateOntology:UpdateReferencedObjectClassNames ;
      sml:baseURI "?outputBaseUri"^^xsd:string ;
      sml:baseURI
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "outputBaseUri"^^xsd:string
                          ]) ;
                sp:where ()
              ] ;
      sml:targetFilePath "?outputFilePath"^^xsd:string ;
      sml:targetFilePath
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "outputFilePath"^^xsd:string
                          ]) ;
                sp:where ()
              ] .

GenerateOntology:ForEachDistinctClass
      rdf:type sml:IterateOverSelect ;
      sm:body GenerateOntology:ForEachDistinctProperty ;
      sm:next GenerateOntology:GenerateJsonOntology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:distinct "true"^^xsd:boolean ;
                sp:resultVariables ([ sp:varName "type"^^xsd:string
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "type"^^xsd:string
                                                ] ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "o"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Filter ;
                                        sp:expression
                                                [ rdf:type fn:starts-with ;
                                                  sp:arg1 [ rdf:type smf:qname ;
                                                            sp:arg1 [ sp:varName "type"^^xsd:string
                                                                    ]
                                                          ] ;
                                                  sp:arg2 "json"
                                                ]
                                      ]) ;
                            sp:graphNameNode <http://www.cmusv.edu/SmartCommunity/Scripts/Temp/RdfData>
                          ])
              ] .

GenerateOntology:ForEachDistinctProperty
      rdf:type sml:IterateOverSelect ;
      sm:body GenerateOntology:AddClassAndProperty ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:distinct "true"^^xsd:boolean ;
                sp:resultVariables ([ sp:varName "property"^^xsd:string
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "type"^^xsd:string
                                                ] ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ] [ sp:object
                                                [ sp:varName "o"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "property"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Filter ;
                                        sp:expression
                                                [ rdf:type fn:starts-with ;
                                                  sp:arg1 [ rdf:type smf:qname ;
                                                            sp:arg1 [ sp:varName "property"^^xsd:string
                                                                    ]
                                                          ] ;
                                                  sp:arg2 "json"
                                                ]
                                      ]) ;
                            sp:graphNameNode <http://www.cmusv.edu/SmartCommunity/Scripts/Temp/RdfData>
                          ])
              ] .

GenerateOntology:FormatUrl
      rdf:type sml:BindBySelect ;
      sm:next GenerateOntology:Merge_1 ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "formattedUrl"^^xsd:string
                          ]) ;
                sp:where ([ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type spif:replaceAll ;
                                      sp:arg1 [ sp:varName "jsonUrl"^^xsd:string
                                              ] ;
                                      sp:arg2 "%22" ;
                                      sp:arg3 "\""
                                    ] ;
                            sp:variable
                                    [ sp:varName "jsonUrl1"^^xsd:string
                                    ]
                          ] [ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type spif:replaceAll ;
                                      sp:arg1 [ sp:varName "jsonUrl1"^^xsd:string
                                              ] ;
                                      sp:arg2 "%26" ;
                                      sp:arg3 "&"
                                    ] ;
                            sp:variable
                                    [ sp:varName "jsonUrl2"^^xsd:string
                                    ]
                          ] [ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type fn:starts-with ;
                                                sp:arg1 [ sp:varName "jsonUrl2"^^xsd:string
                                                        ] ;
                                                sp:arg2 "\""
                                              ] ;
                                      sp:arg2 [ rdf:type smf:subString ;
                                                arg:fromIndex 1 ;
                                                arg:toIndex
                                                        [ rdf:type fn:string-length ;
                                                          sp:arg1 [ sp:varName "jsonUrl2"^^xsd:string
                                                                  ]
                                                        ] ;
                                                sp:arg1 [ sp:varName "jsonUrl2"^^xsd:string
                                                        ]
                                              ] ;
                                      sp:arg3 [ sp:varName "jsonUrl2"^^xsd:string
                                              ]
                                    ] ;
                            sp:variable
                                    [ sp:varName "jsonUrl3"^^xsd:string
                                    ]
                          ] [ rdf:type sp:Bind ;
                            sp:expression
                                    [ rdf:type smf:if ;
                                      sp:arg1 [ rdf:type fn:ends-with ;
                                                sp:arg1 [ sp:varName "jsonUrl3"^^xsd:string
                                                        ] ;
                                                sp:arg2 "\""
                                              ] ;
                                      sp:arg2 [ rdf:type smf:subString ;
                                                arg:fromIndex 0 ;
                                                arg:toIndex
                                                        [ rdf:type sp:sub ;
                                                          sp:arg1 [ rdf:type fn:string-length ;
                                                                    sp:arg1 [ sp:varName "jsonUrl3"^^xsd:string
                                                                            ]
                                                                  ] ;
                                                          sp:arg2 1
                                                        ] ;
                                                sp:arg1 [ sp:varName "jsonUrl3"^^xsd:string
                                                        ]
                                              ] ;
                                      sp:arg3 [ sp:varName "jsonUrl3"^^xsd:string
                                              ]
                                    ] ;
                            sp:variable
                                    [ sp:varName "jsonUrl4"^^xsd:string
                                    ]
                          ] [ rdf:type sp:Bind ;
                            sp:expression
                                    [ sp:varName "jsonUrl4"^^xsd:string
                                    ] ;
                            sp:variable
                                    [ sp:varName "formattedUrl"^^xsd:string
                                    ]
                          ])
              ] .

GenerateOntology:GenerateJsonOntology
      rdf:type sm:Function , sml:ReturnSPARQLResults ;
      rdfs:subClassOf sm:Functions ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:defaultValue "RootObject"^^xsd:string ;
                spl:predicate sp:jsonRootClass ;
                spl:valueType xsd:string ;
                sm:next GenerateOntology:Merge_1
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:defaultValue "http://www.cmusv.edu/SmartCommunity/Scripts/Output/JsonOntology"^^xsd:string ;
                spl:predicate sp:ontologyBaseUri ;
                spl:valueType xsd:string ;
                sm:next GenerateOntology:BindGraphUri
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:defaultValue "RdfOutput.ttl"^^xsd:string ;
                spl:predicate sp:outputFileName ;
                spl:valueType xsd:string ;
                sm:next GenerateOntology:BindFilePaths
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:defaultValue "http://cmu-sds.herokuapp.com/get_devices"^^xsd:string ;
                spl:predicate sp:jsonUrl ;
                spl:valueType xsd:string ;
                sm:next GenerateOntology:FormatUrl
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:defaultValue "JsonOntology.ttl"^^xsd:string ;
                spl:predicate sp:ontologyFileName ;
                spl:valueType xsd:string ;
                sm:next GenerateOntology:BindFilePaths
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:defaultValue "http://www.cmusv.edu/SmartCommunity/Scripts/Output/RdfOutput"^^xsd:string ;
                spl:predicate sp:outputBaseUri ;
                spl:valueType xsd:string ;
                sm:next GenerateOntology:BindGraphUri
              ] ;
      sm:returnModule GenerateOntology:GenerateJsonOntology ;
      sml:selectQuery
              [ rdf:type sp:Select ;
                sp:where ([ sp:object
                                    [ sp:varName "o"^^xsd:string
                                    ] ;
                            sp:predicate
                                    [ sp:varName "p"^^xsd:string
                                    ] ;
                            sp:subject
                                    [ sp:varName "s"^^xsd:string
                                    ]
                          ])
              ] ;
      sml:serialization sm:XML .

GenerateOntology:IfPropertyReferencesACollection
      rdf:type sml:BranchByAsk ;
      sm:if   GenerateOntology:AddCollectionRestrictions ;
      sml:askQuery
              [ rdf:type sp:Ask ;
                sp:where ([ rdf:type sp:Filter ;
                            sp:expression
                                    [ rdf:type smf:isBound ;
                                      sp:arg1 [ sp:varName "collectionPropertyType"^^xsd:string
                                              ]
                                    ]
                          ])
              ] .

GenerateOntology:IfPropertyReferencesAType
      rdf:type sml:BranchByAsk ;
      sm:else GenerateOntology:BindCollectionInfo ;
      sm:if   GenerateOntology:AddPropertyRestrictions ;
      sml:askQuery
              [ rdf:type sp:Ask ;
                sp:where ([ rdf:type sp:Filter ;
                            sp:expression
                                    [ rdf:type smf:isBound ;
                                      sp:arg1 [ sp:varName "propertyType"^^xsd:string
                                              ]
                                    ]
                          ])
              ] .

GenerateOntology:ImportDeviceJsonFromUrl
      rdf:type sml:ImportTextFromURL ;
      sm:next GenerateOntology:ConvertJsonToRdf ;
      sm:outputVariable "text"^^xsd:string ;
      sml:url "?formattedUrl"^^xsd:string ;
      sml:url [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "formattedUrl"^^xsd:string
                          ]) ;
                sp:where ()
              ] .

GenerateOntology:LoadOutputIntoTempGraph
      rdf:type sml:PerformUpdate ;
      sm:next GenerateOntology:CreateOntologyFileAndGraph ;
      sml:updateQuery
              [ rdf:type sp:Modify ;
                sp:insertPattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "o"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "p"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <http://www.cmusv.edu/SmartCommunity/Scripts/Temp/RdfData>
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "o"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "p"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "s"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ])
              ] .

GenerateOntology:Merge_1
      rdf:type sml:Merge ;
      sm:next GenerateOntology:CreateTempFileAndGraph .

GenerateOntology:UpdateCollectionReferencedObjectClassNames
      rdf:type sml:PerformUpdate ;
      sm:next GenerateOntology:UpdateRootObjectClassName ;
      sml:updateQuery
              [ rdf:type sp:Modify ;
                sp:deletePattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object json:Object ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "item"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ]) ;
                sp:insertPattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "newType"^^xsd:string
                                                ] ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "item"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "type"^^xsd:string
                                                ] ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "parent"^^xsd:string
                                                ]
                                      ] [ sp:object
                                                [ sp:varName "collection"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "predicate"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "parent"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:TriplePath ;
                                        sp:object
                                                [ sp:varName "item"^^xsd:string
                                                ] ;
                                        sp:path [ rdf:type sp:SeqPath ;
                                                  sp:path1
                                                          [ rdf:type sp:ModPath ;
                                                            sp:modMax -2 ;
                                                            sp:modMin 0 ;
                                                            sp:subPath rdf:rest
                                                          ] ;
                                                  sp:path2 rdf:first
                                                ] ;
                                        sp:subject
                                                [ sp:varName "collection"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type smf:titleCase ;
                                                  sp:arg1 [ rdf:type afn:localname ;
                                                            sp:arg1 [ sp:varName "predicate"^^xsd:string
                                                                    ]
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "className"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type smf:if ;
                                                  sp:arg1 [ rdf:type fn:ends-with ;
                                                            sp:arg1 [ sp:varName "className"^^xsd:string
                                                                    ] ;
                                                            sp:arg2 "s"
                                                          ] ;
                                                  sp:arg2 [ rdf:type smf:subString ;
                                                            arg:fromIndex 0 ;
                                                            arg:toIndex
                                                                    [ rdf:type sp:sub ;
                                                                      sp:arg1 [ rdf:type fn:string-length ;
                                                                                sp:arg1 [ sp:varName "className"^^xsd:string
                                                                                        ]
                                                                              ] ;
                                                                      sp:arg2 1
                                                                    ] ;
                                                            sp:arg1 [ sp:varName "className"^^xsd:string
                                                                    ]
                                                          ] ;
                                                  sp:arg3 [ sp:varName "className"^^xsd:string
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "singularClassName"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type spif:buildURI ;
                                                  sp:arg1 [ rdf:type fn:concat ;
                                                            sp:arg1 "json:" ;
                                                            sp:arg2 [ sp:varName "singularClassName"^^xsd:string
                                                                    ]
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "newType"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Filter ;
                                        sp:expression
                                                [ rdf:type sp:and ;
                                                  sp:arg1 [ rdf:type fn:starts-with ;
                                                            sp:arg1 [ rdf:type smf:qname ;
                                                                      sp:arg1 [ sp:varName "predicate"^^xsd:string
                                                                              ]
                                                                    ] ;
                                                            sp:arg2 "json"
                                                          ] ;
                                                  sp:arg2 [ rdf:type sp:not ;
                                                            sp:arg1 [ rdf:type sp:isLiteral ;
                                                                      sp:arg1 [ sp:varName "item"^^xsd:string
                                                                              ]
                                                                    ]
                                                          ]
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ])
              ] .

GenerateOntology:UpdateReferencedObjectClassNames
      rdf:type sml:PerformUpdate ;
      sm:next GenerateOntology:UpdateCollectionReferencedObjectClassNames ;
      sml:updateQuery
              [ rdf:type sp:Modify ;
                sp:deletePattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object json:Object ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "child"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ]) ;
                sp:insertPattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "newType"^^xsd:string
                                                ] ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "child"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "type"^^xsd:string
                                                ] ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "parent"^^xsd:string
                                                ]
                                      ] [ sp:object
                                                [ sp:varName "child"^^xsd:string
                                                ] ;
                                        sp:predicate
                                                [ sp:varName "predicate"^^xsd:string
                                                ] ;
                                        sp:subject
                                                [ sp:varName "parent"^^xsd:string
                                                ]
                                      ] [ sp:object json:Object ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "child"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type smf:titleCase ;
                                                  sp:arg1 [ rdf:type afn:localname ;
                                                            sp:arg1 [ sp:varName "predicate"^^xsd:string
                                                                    ]
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "className"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type spif:buildURI ;
                                                  sp:arg1 [ rdf:type fn:concat ;
                                                            sp:arg1 "json:" ;
                                                            sp:arg2 [ sp:varName "className"^^xsd:string
                                                                    ]
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "newType"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Filter ;
                                        sp:expression
                                                [ rdf:type fn:starts-with ;
                                                  sp:arg1 [ rdf:type smf:qname ;
                                                            sp:arg1 [ sp:varName "predicate"^^xsd:string
                                                                    ]
                                                          ] ;
                                                  sp:arg2 "json"
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ])
              ] .

GenerateOntology:UpdateRootObjectClassName
      rdf:type sml:PerformUpdate ;
      sm:next GenerateOntology:LoadOutputIntoTempGraph ;
      sml:updateQuery
              [ rdf:type sp:Modify ;
                sp:deletePattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object json:Object ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "jsonRoot"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ]) ;
                sp:insertPattern ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object
                                                [ sp:varName "newType"^^xsd:string
                                                ] ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "jsonRoot"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ]) ;
                sp:where ([ rdf:type sp:NamedGraph ;
                            sp:elements ([ sp:object json:Object ;
                                        sp:predicate rdf:type ;
                                        sp:subject
                                                [ sp:varName "jsonRoot"^^xsd:string
                                                ]
                                      ] [ rdf:type sp:Bind ;
                                        sp:expression
                                                [ rdf:type spif:buildURI ;
                                                  sp:arg1 [ rdf:type fn:concat ;
                                                            sp:arg1 "json:" ;
                                                            sp:arg2 [ sp:varName "jsonRootClass"^^xsd:string
                                                                    ]
                                                          ]
                                                ] ;
                                        sp:variable
                                                [ sp:varName "newType"^^xsd:string
                                                ]
                                      ]) ;
                            sp:graphNameNode <urn:x-var:outputGraphUri>
                          ])
              ] .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .

[]    sp:varName "property"^^xsd:string .

[]    rdf:type sp:Select ;
      sp:where ([ sp:object
                          [ sp:varName "type"^^xsd:string
                          ] ;
                  sp:predicate rdf:type ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ sp:object
                          [ sp:varName "examplePropertyReference"^^xsd:string
                          ] ;
                  sp:predicate
                          [ sp:varName "property"^^xsd:string
                          ] ;
                  sp:subject
                          [ sp:varName "s"^^xsd:string
                          ]
                ] [ rdf:type sp:Filter ;
                  sp:expression
                          [ rdf:type fn:starts-with ;
                            sp:arg1 [ rdf:type smf:qname ;
                                      sp:arg1 [ sp:varName "property"^^xsd:string
                                              ]
                                    ] ;
                            sp:arg2 "json"
                          ]
                ]) .
